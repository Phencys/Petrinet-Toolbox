/**
\mainpage Introduction
\brief A generic Petri-Net implementation in Matlab
\author Erik Zandvliet<br>
University of Leiden<br>
ezandvli@liacs.nl
\version 1.0

\section Introduction Introduction

Petri Nets are models -- with well-known algorithms for proving or disproving statements about these models -- that can be used for the modeling of systems, but there is not one tool that can be used for all the different types of nets that have been developed over the last couple of years. To still be able to do research on these nets, most research groups write their own simple tools, which are useless once the researcher leaves the group. There are some more extended packages available as well, for example Snoopy and CPN-Tools, but these have closed sources, and don't necessarily have all the features a researcher would like to have control over while creating these nets.
      
Therefore, our intent is to create an open-source software package that is able to implement several types of petri-nets, and in which the user has full control over all functionality. 

One of the key features of the software package, is this documentation. It is an essential feature in maintaining the package, and in giving everybody an as large as possible freedom to extend/use the package.

\section ProducerConsumer The Producer/Consumer Model
\subsection PTNet P/T Net
\subsubsection PTPlaces Places
\f[
  \bordermatrix{ & PlaceID \cr & Producer\_ReadyToProduce \cr & Producer\_NonIdle \cr & Consumer\_ReadyToConsume \cr & Consumer\_NonIdle \cr & Buffer \cr }
\f]
\code
%Add places
  %Without inital markings
    PN.Add( 'Place', 'Producer_NonIdle' );
    PN.Add( 'Place', 'Consumer_NonIdle' );
    PN.Add( 'Place', 'Buffer' );
  %With initial markings
    PN.Add( 'Place', 'Producer_ReadyToProduce', 'Dot', '1.');
    PN.Add( 'Place', 'Consumer_ReadyToConsume', 'Dot', '1.' );
\endcode

\subsubsection PTTransitions Transitions
\f[
  \bordermatrix{ & TransitionID \cr & Produce \cr & Producer\_ToIdle \cr & Consume \cr & Consumer\_ToIdle \cr }
\f]
\code
%Add transitions
    PN.Add( 'Transition', 'Produce' );
    PN.Add( 'Transition', 'Producer_ToIdle' );
    PN.Add( 'Transition', 'Consume' );
    PN.Add( 'Transition', 'Consumer_ToIdle' );
\endcode

\subsubsection PTTransitions Transitions
\f[
  \bordermatrix{
                           & Produce & Producer\_ToIdle & Consume & Consumer\_ToIdle \cr
  Producer\_ReadyToProduce & -1 & 1  & 0  & 0 \cr
  Producer\_NonIdle        & 1  & -1 & 0  & 0 \cr
  Consumer\_ReadyToConsume & 0  & 0  & -1 & 1 \cr
  Consumer\_NonIdle        & 0  & 0  & -1 & 1 \cr
  }
\f]

\code
%Add arcs
  %Produce
    PN.Add( 'Arc', 'Producer_ReadyToProduce->Produce', '1.' );
    PN.Add( 'Arc', 'Produce->Producer_NonIdle', '1.' );
    PN.Add( 'Arc', 'Produce->Buffer', '1.' );
  %Producer_ToIdle
    PN.Add( 'Arc', 'Producer_ToIdle->Producer_ReadyToProduce', '1.' );
    PN.Add( 'Arc', 'Producer_NonIdle->Producer_ToIdle', '1.' );
  %Consume
    PN.Add( 'Arc', 'Buffer->Consume', '1.' );
    PN.Add( 'Arc', 'Consume->Consumer_ReadyToConsume', '1.' );
    PN.Add( 'Arc', 'Consumer_NonIdle->Consume', '1.' );
  %Consumer_ToIdle
    PN.Add( 'Arc', 'Consumer_ReadyToConsume->Consumer_ToIdle', '1.' );
    PN.Add( 'Arc', 'Consumer_ToIdle->Consumer_NonIdle', '1.' );
\endcode
**/
